/* tslint:disable */
/* eslint-disable */
/**
 * Backend API
 * This API exposes endpoints to manage demo.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vuthase172485@fpt.edu.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    role?: UserResponseRoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    isActive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    socialProvider?: UserResponseSocialProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    providerId?: string;
}


/**
 * @export
 */
export const UserResponseRoleEnum = {
    Admin: 'ADMIN',
    Manager: 'MANAGER',
    Customer: 'CUSTOMER'
} as const;
export type UserResponseRoleEnum = typeof UserResponseRoleEnum[keyof typeof UserResponseRoleEnum];

/**
 * @export
 */
export const UserResponseSocialProviderEnum = {
    Database: 'DATABASE',
    Facebook: 'FACEBOOK',
    Google: 'GOOGLE'
} as const;
export type UserResponseSocialProviderEnum = typeof UserResponseSocialProviderEnum[keyof typeof UserResponseSocialProviderEnum];


/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): value is UserResponse {
    return true;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'fullName': json['fullName'] == null ? undefined : json['fullName'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'email': json['email'] == null ? undefined : json['email'],
        'imageUrl': json['imageUrl'] == null ? undefined : json['imageUrl'],
        'role': json['role'] == null ? undefined : json['role'],
        'isActive': json['isActive'] == null ? undefined : json['isActive'],
        'socialProvider': json['socialProvider'] == null ? undefined : json['socialProvider'],
        'providerId': json['providerId'] == null ? undefined : json['providerId'],
    };
}

export function UserResponseToJSON(value?: UserResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'fullName': value['fullName'],
        'phoneNumber': value['phoneNumber'],
        'email': value['email'],
        'imageUrl': value['imageUrl'],
        'role': value['role'],
        'isActive': value['isActive'],
        'socialProvider': value['socialProvider'],
        'providerId': value['providerId'],
    };
}

