/* tslint:disable */
/* eslint-disable */
/**
 * Backend API
 * This API exposes endpoints to manage demo.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vuthase172485@fpt.edu.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecipeEntity,
} from '../models/index';
import {
    RecipeEntityFromJSON,
    RecipeEntityToJSON,
} from '../models/index';

export interface CreateRecipeRequest {
    recipeEntity: RecipeEntity;
}

export interface DeleteRecipeByIdRequest {
    id: number;
}

export interface GetRecipeByIdRequest {
    id: number;
}

export interface UpdateRecipeRequest {
    id: number;
    recipeEntity: RecipeEntity;
}

/**
 * 
 */
export class RecipeControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRecipeRaw(requestParameters: CreateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeEntity>> {
        if (requestParameters['recipeEntity'] == null) {
            throw new runtime.RequiredError(
                'recipeEntity',
                'Required parameter "recipeEntity" was null or undefined when calling createRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/recipes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeEntityToJSON(requestParameters['recipeEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeEntityFromJSON(jsonValue));
    }

    /**
     */
    async createRecipe(requestParameters: CreateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeEntity> {
        const response = await this.createRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRecipeByIdRaw(requestParameters: DeleteRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRecipeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecipeById(requestParameters: DeleteRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecipeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRecipesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecipeEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/recipes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeEntityFromJSON));
    }

    /**
     */
    async getAllRecipes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecipeEntity>> {
        const response = await this.getAllRecipesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecipeByIdRaw(requestParameters: GetRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRecipeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeEntityFromJSON(jsonValue));
    }

    /**
     */
    async getRecipeById(requestParameters: GetRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeEntity> {
        const response = await this.getRecipeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRecipeRaw(requestParameters: UpdateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRecipe().'
            );
        }

        if (requestParameters['recipeEntity'] == null) {
            throw new runtime.RequiredError(
                'recipeEntity',
                'Required parameter "recipeEntity" was null or undefined when calling updateRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeEntityToJSON(requestParameters['recipeEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateRecipe(requestParameters: UpdateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeEntity> {
        const response = await this.updateRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
