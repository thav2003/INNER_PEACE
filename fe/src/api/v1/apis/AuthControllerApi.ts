/* tslint:disable */
/* eslint-disable */
/**
 * Backend API
 * This API exposes endpoints to manage demo.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vuthase172485@fpt.edu.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AuthResponse,
  ChangePasswordRequest,
  LoginRequest,
  SignUpRequest,
  ValidateOtpRequest,
} from "../models/index";
import {
  AuthResponseFromJSON,
  AuthResponseToJSON,
  ChangePasswordRequestFromJSON,
  ChangePasswordRequestToJSON,
  LoginRequestFromJSON,
  LoginRequestToJSON,
  SignUpRequestFromJSON,
  SignUpRequestToJSON,
  ValidateOtpRequestFromJSON,
  ValidateOtpRequestToJSON,
} from "../models/index";

export interface ChangePasswordOperationRequest {
  changePasswordRequest: ChangePasswordRequest;
}

export interface GenerateOTPRequest {
  email: string;
}

export interface SigninRequest {
  loginRequest: LoginRequest;
}

export interface SignupRequest {
  signUpRequest: SignUpRequest;
}

export interface ValidateOTPRequest {
  validateOtpRequest: ValidateOtpRequest;
}

/**
 *
 */
export class AuthControllerApi extends runtime.BaseAPI {
  /**
   */
  async changePasswordRaw(
    requestParameters: ChangePasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["changePasswordRequest"] == null) {
      throw new runtime.RequiredError(
        "changePasswordRequest",
        'Required parameter "changePasswordRequest" was null or undefined when calling changePassword().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuthentication", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/auth/reset-password`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ChangePasswordRequestToJSON(
          requestParameters["changePasswordRequest"]
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async changePassword(
    requestParameters: ChangePasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.changePasswordRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async generateOTPRaw(
    requestParameters: GenerateOTPRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling generateOTP().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuthentication", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/auth/send-otp`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async generateOTP(
    requestParameters: GenerateOTPRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.generateOTPRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async signinRaw(
    requestParameters: SigninRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthResponse>> {
    if (requestParameters["loginRequest"] == null) {
      throw new runtime.RequiredError(
        "loginRequest",
        'Required parameter "loginRequest" was null or undefined when calling signin().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuthentication", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/auth/signin`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginRequestToJSON(requestParameters["loginRequest"]),
      },
      initOverrides
    );
    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async signin(
    requestParameters: SigninRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthResponse> {
    const response = await this.signinRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async signupRaw(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["signUpRequest"] == null) {
      throw new runtime.RequiredError(
        "signUpRequest",
        'Required parameter "signUpRequest" was null or undefined when calling signup().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuthentication", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/auth/signup`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SignUpRequestToJSON(requestParameters["signUpRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async signup(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.signupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async validateOTPRaw(
    requestParameters: ValidateOTPRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["validateOtpRequest"] == null) {
      throw new runtime.RequiredError(
        "validateOtpRequest",
        'Required parameter "validateOtpRequest" was null or undefined when calling validateOTP().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("BearerAuthentication", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/auth/checkotp`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ValidateOtpRequestToJSON(requestParameters["validateOtpRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async validateOTP(
    requestParameters: ValidateOTPRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.validateOTPRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
